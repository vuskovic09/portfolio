//@include link-underline(#000, 3px);
@mixin link-underline($color, $height){
  a {
      position: relative;

      &:after {
          background: $color;
          content: '';
          display: block;
          height: $height;
          position: absolute;
          right: 0;
          transition: width .2s ease;
          width: 0; 
          -webkit-transition: width .2s ease;
      }

      &:hover {
          &:after {
              background: $color;
              left: 0;
              width: 100%;
          }
      }
  }
}

//@include border-hover(#252525, #168dff, 2px, 0.8s);
@mixin border-hover($color, $hoverColor, $borderWidth, $time) {
  $easing: cubic-bezier(0.4, 0, 0.2, 1);
  
  display: inline-block;
  overflow: hidden;
  padding: 0.5em 2em;
  position: relative;

  &:before,
  &:after {
    background-color: $color;
    content: "";
    height: $borderWidth;
    left: 0;
    position: absolute;
    width: 100%;
  }

  &:before {
    top: 0;
  }

  &:after {
    bottom: 0;
  }

  &:hover {

    & > * {

      & > * {

        &:before,
        &:after {
          transform: translate3d(0, 0, 0);
        }

        & > * {
          &:before,
          &:after {
            transform: translate3d(0, 0, 0);
          }
        }
      }
    }
  }

  & > * {

    &:before,
    &:after {
      background-color: $color;
      content: "";
      height: 100%;
      position: absolute;
      top: 0;
      width: $borderWidth;
    }

    &:before {
      left: 0;
    }

    &:after {
      right: 0;
    }

    & > * {

      &:before,
      &:after {
        background-color: $hoverColor;
        content: "";
        height: $borderWidth;
        left: 0;
        position: absolute;
        width: 100%;  
        z-index: 9;
      }

      &:before {
        top: 0;
        transform: translate3d(-105%, 0, 0);
        transition: transform $time $easing;
      }

      &:after {
        bottom: 0;
        transform: translate3d(105%, 0, 0);
        transition: transform $time $easing;
      }

      & > * {

        &:before,
        &:after {
          background-color: $hoverColor;
          content: "";
          height: 100%;
          position: absolute;
          top: 0;
          width: $borderWidth;
          z-index: 9;
        }

        &:before {
          left: 0;
          transform: translate3d(0, 105%, 0);
          transition: transform $time $easing;
        }

        &:after {
          right: 0;
          transform: translate3d(0, -105%, 0);
          transition: transform $time $easing;
        }
      }
    }
  }
}

// @include background-image(logo, png, 100px 100px, center, no-repeat);
@mixin background-image($file, $type, $size, $position, $repeat, $retina: false) {

    background-image: url($image-path + $file + '.' + $type);
    background-position: $position;
    background-repeat: $repeat;
    background-size: $size;

    @if ($retina == true) {
        @include hidpi(1.3) {
            background-image: url($image-path + $file + $image-suffix + '.' + $type);
        }
    }

}

// @include breakpoint(sm) {}
@mixin breakpoint($value) {

    @if $value == xs {
        @media (max-width: $xs) { @content; }
    }

    @if $value == sm {
        @media (max-width: $sm) { @content; }
    }

    @if $value == md {
        @media (max-width: $md) { @content; }
    }

    @if $value == lg {
        @media (max-width: $lg) { @content; }
    }

}

// @include column(2);
@mixin column($value) {
	width: calc(100% / (#{$grid-columns} / #{$value}));
}

// @include column-offset(2);
@mixin column-offset($value) {
	margin-left: calc(100% / (#{$grid-columns} / #{$value}));
}

// @include flex(flex, row, wrap, flex-start, flex-start);
@mixin flex($display, $flex-direction, $flex-wrap, $justify-content, $align-items, $align-content: null) {
	@if $display == 'inline-flex' {
		display: inline-flex;
	} @else {
		display: flex;
	}
	flex-flow: $flex-direction $flex-wrap;
	justify-content: $justify-content;
	align-items: $align-items;
	align-content: $align-content;
}

// @include hidpi(1.3)
@mixin hidpi($ratio: 1.3) {
    @media only screen and (-webkit-min-device-pixel-ratio: $ratio),
        only screen and (min--moz-device-pixel-ratio: $ratio),
        only screen and (-o-min-device-pixel-ratio: #{$ratio}/1),
        only screen and (min-resolution: round($ratio * 96dpi)),
        only screen and (min-resolution: $ratio * 1dppx) {
            @content;
        }
}

// @include link-color(#fff, #999, none, underline);
@mixin link-color($value1, $value2, $value3: false, $value4: false) {
	&:link,
	&:visited {
		color: $value1;
        text-decoration: $value3;
	}
	&:hover,
	&:active {
		color: $value2;
        text-decoration: $value4;
	}
}

// @include list-reset;
@mixin list-reset {
	list-style: none;
	margin: 0;
	padding: 0;
}

// @include momentum-scroll;
@mixin momentum-scroll {
	overflow-y: scroll;
	-webkit-overflow-scrolling: touch;
}

// @include placeholder-color(#fff);
@mixin placeholder-color($value) {
	&::-webkit-input-placeholder {
	   color: $value;
	}
	&:-moz-placeholder {
	   color: $value;
	}
	&::-moz-placeholder {
	   color: $value;
	}
	&:-ms-input-placeholder {
	   color: $value;
	}
}

// @include position-absolute($top: 10px, $left: 10px);
@mixin position-absolute($top: null, $right: null, $bottom: null, $left: null) {
    bottom: $bottom;
    left: $left;
    position: absolute;
    right: $right;
    top: $top;
}

// @include responsive-img;
@mixin responsive-img {
    display: block;
    height: auto;
    max-width: 100%;
    min-width: 100%;
}

// @include text-truncate;
@mixin text-truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

// @include vertical-align;
@mixin vertical-align {
    position: relative;
    top: 50%;
    transform: translateY(-50%);
}

// @include reset-vertical-align;
@mixin reset-vertical-align {
    top: auto;
    transform: none;
}
